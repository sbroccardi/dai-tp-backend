openapi: 3.0.3
info:
  title: ScreenSpace
  description: |-
    The ScreenSpace mobile app is a complete solution for movie lovers that allows them to explore, purchase tickets and enjoy movies in nearby theaters more efficiently and personalized. Users can search for movies, view showtimes, purchase tickets and rate movies after watching them. The app also provides personalized recommendations based on the userâ€™s rating and viewing data.

    Some useful links:
    - [Frontend repository](https://github.com/sbroccardi/dai-tp-frontend)
    - [Backend repository](https://github.com/sbroccardi/dai-tp-backend)
    - [The source API definition for ScreenSpace API](https://github.com/sbroccardi/dai-tp-backend/blob/main/openapi.yaml)
  termsOfService: https://github.com/sbroccardi/dai-tp-backend/blob/main/terms.txt
  contact:
    email: sgilbroccardi@uade.edu.ar
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.11
servers:
  - url: https://screenspace.swagger.io/api/v3
tags:
  - name: auths
    description: Session operations
  - name: users
    description: Operations about Users
  - name: cinemas
    description: Access to Cinemas
  - name: auditoriums
    description: Operations about Auditoriums
  - name: movies
    description: Operations about Movies
  - name: misc
    description: checkout operations
paths:
  /health:
    get:
      tags:
        - misc
      summary: Health status
      responses:
        '200':
          description: Successful operation
        '503':
          description: Service unavailable
  /auths/loginPrivate:
    post:
      tags:
        - auths
      summary: Private login 
      requestBody:
        content: 
          application/json:
            schema:
              $ref: '#/components/schemas/Login'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessToken'
        '401':
          description: Invalid username or password supplied
  /auths/loginPublic:
    get:
      tags:
        - auths
      summary: Public login
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessToken'
        '401':
          description: Can't log in with Google
  /auths:
    put:
      tags:
        - auths
      summary: Refresh token
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessToken'
        '401':
          description: refresh token missing or invalid
    delete:
      tags:
        - auths
      summary: Logout
      responses:
        '200':
          description: Successful operation
  /users:
    post:
      tags:
        - users
      summary: Register 
      requestBody:
        content: 
          application/json:
            schema:
              $ref: '#/components/schemas/Register'
        required: true
      responses:
        '201':
          description: Resource created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessToken'
        '400':
          description: Bad request
        '409':
          description: Source Already Exists
  /users/resetpassword:
    post:
      tags:
        - users
      summary: Reset password
      parameters:
        - name: email
          in: query
          description: email
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
        '400':
          description: Bad request
  /users/confirmcode:
    post:
      tags:
        - users
      summary: Confirm code sent
      parameters:
        - name: email
          in: query
          description: email
          required: true
          schema:
            type: string
        - name: resetCode
          in: query
          description: resetCode
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
        '400':
          description: Invalid code
  /users/{user_id}/changepassword:
    post:
      tags:
        - users
      summary: Change password
      parameters:
        - name: user_id
          in: path
          description: user_id
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content: 
          application/json:
            schema:
              $ref: '#/components/schemas/NewPassword'
      responses:
        '200':
          description: Succesful operation
        '404':
          description: User not found
        '400':
          description: Invalid code
  /users/{user_id}:
    get:
      tags:
        - users
      summary:
        Get an user profile
      parameters:
        - name: user_id
          in: path
          description: user_id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
        '404':
          description: User not found
        '401':
          description: Unauthorized
  /users/{user_id}/me:
    get:
      tags:
        - users
      summary:
        Get user profile
      parameters:
        - name: user_id
          in: path
          description: user_id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
        '404':
          description: User not found
        '401':
          description: Unauthorized
    put:
      tags:
        - users
      summary: Update user profile
      parameters:
        - name: user_id
          in: path
          description: user_id
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content: 
          application/json:
            schema:
              $ref: '#/components/schemas/Register'
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '404':
          description: Resource not found
    delete:
      tags:
        - users
      parameters:
        - name: user_id
          in: path
          description: ID of user that needs to be fetched
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
        '404':
          description: User not found
        '401':
          description: Unauthorized
  /users/{user_id}/purchases:
    get:
      tags:
        - users
      summary:
          Get user purchases
      parameters:
        - name: user_id
          in: path
          description: user_id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Purchase'
        '404':
          description: User not found
        '401':
          description: Unauthorized
  /movies/{movie_id}/comments: 
    post:
      tags:
        - movies
      summary: Rate & comment movie
      parameters:
        - name: movie_id
          in: path
          description: movie_id
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content: 
          application/json:
            schema:
              $ref: '#/components/schemas/Comment'
      responses:
        '201':
          description: Resource created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '404':
          description: Resource not found
        '409':
          description: Source Already Exists
  /cinemas:
    post:
      tags:
        - cinemas
      summary: Create cinema
      requestBody:
        content: 
          application/json:
            schema:
              $ref: '#/components/schemas/Cinema'
      responses:
        '201':
          description: Resource created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cinema'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '409':
          description: Source Already Exists
    get:
      tags:
        - cinemas
      summary:
          List user's cinemas
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Cinema'
        '401':
          description: Unauthorized
        '404':
          description: User not found
  /cinemas/{cinema_id}:
    get:
      tags:
        - cinemas
      summary:
          Get cinema details
      parameters:
        - name: cinema_id
          in: path
          description: cinema_id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cinema'
        '401':
          description: Unauthorized
        '404':
          description: Resource not found
    put:
      tags:
        - cinemas
      summary: Update cinema
      parameters:
        - name: cinema_id
          in: path
          description: cinema_id
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content: 
          application/json:
            schema:
              $ref: '#/components/schemas/Cinema'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cinema'
        '401':
          description: Unauthorized
        '404':
          description: Resource not found
    delete:
      tags:
        - cinemas
      parameters:
        - name: cinema_id
          in: path
          description: ID of cinema that needs to be fetched
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
        '401':
          description: Unauthorized
        '404':
          description: Resource not found
  /cinemas/{cinema_id}/auditoriums:
    get:
      tags:
        - auditoriums
      summary: List cinema's auditoriums
      parameters:
        - name: cinema_id
          in: path
          description: ID of cinema that needs to be fetched
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items: 
                  $ref: '#/components/schemas/Auditorium'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '404':
          description: Resource not found
    post:
      tags:
        - auditoriums
      summary: Create auditorium
      parameters:
        - name: cinema_id
          in: path
          description: cinema_id
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content: 
          application/json:
            schema:
              $ref: '#/components/schemas/Auditorium'
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Auditorium'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '404':
          description: Resource not found
        '409':
          description: Source Already Exists
  /cinemas/{cinema_id}/auditoriums/{auditorium_id}:
    get:
      tags:
        - auditoriums
      summary:
          Get auditorium details
      parameters:
        - name: cinema_id
          in: path
          description: cinema_id
          required: true
          schema:
            type: integer
            format: int64
        - name: auditorium_id
          in: path
          description: auditorium_id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Auditorium'
        '401':
          description: Unauthorized
        '404':
          description: Resource not found
    put:
      tags:
        - auditoriums
      summary: Update auditorium
      parameters:
        - name: cinema_id
          in: path
          description: cinema_id
          required: true
          schema:
            type: integer
            format: int64
        - name: auditorium_id
          in: path
          description: auditorium_id
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content: 
          application/json:
            schema:
              $ref: '#/components/schemas/Auditorium'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Auditorium'
        '401':
          description: Unauthorized
        '404':
          description: Resource not found
    delete:
      tags:
        - auditoriums
      parameters:
        - name: cinema_id
          in: path
          description: ID of cinema that needs to be fetched
          required: true
          schema:
            type: integer
            format: int64
        - name: auditorium_id
          in: path
          description: ID of auditorium that needs to be fetched
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
        '401':
          description: Unauthorized
        '404':
          description: Resource not found
  /movies:
    get:
      tags:
        - movies
      summary:
           List movies       
      parameters:
        - name: genre
          in: query
          description: genre of movie
          required: true
          schema:
            type: string
        - name: age
          in: query
          description: age allowed
          required: true
          schema:
            type: integer
            format: int64
        - name: raiting
          in: query
          description: rating of the movie
          required: true
          schema:
            type: integer
            format: int64
        - name: distance
          in: query
          description: distance of the cinema
          required: true
          schema:
            type: number
        - name: cinema
          in: query
          description: name of the cinema
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Movie'
        '401':
          description: Unauthorized
  /movies/{movie_id}:
    get:
      tags:
        - movies
      summary:
          Get movie details
      parameters:
        - name: movie_id
          in: path
          description: movie_id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Movie'
        '401':
          description: Unauthorized
        '404':
          description: Resource not found
  /movies/{movie_id}/screenings:
    get:
      tags:
        - screenings
      summary:
          List screening
      parameters:
        - name: movie_id
          in: path
          description: movie_id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Screening'
        '401':
          description: Unauthorized
        '404':
          description: Resource not found
    post:
      tags:
        - screenings
      summary: Create screening
      parameters:
        - name: movie_id
          in: path
          description: movie_id
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Screening'
      responses:
        '201':
          description: Resource created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Screening'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '404':
          description: Resource not found
        '409':
          description: Source Already Exists
  /movies/{movie_id}/screenings/{screening_id}:
    get:
      tags:
        - screenings
      summary:
          Get screening details
      parameters:
        - name: movie_id
          in: path
          description: movie_id
          required: true
          schema:
            type: integer
            format: int64
        - name: screening_id
          in: path
          description: screening_id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Screening'
        '401':
          description: Unauthorized
        '404':
          description: Resource not found
    delete:
      tags:
        - screenings
      parameters:
        - name: movie_id
          in: path
          description: ID of movie that needs to be fetched
          required: true
          schema:
            type: integer
            format: int64
        - name: screening_id
          in: path
          description: ID of screening that needs to be fetched
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
        '401':
          description: Unauthorized
        '404':
          description: Resource not found
  /movies/screenings:
    get:
      tags:
        - screenings
      summary:
        List all user screening (with token)
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Screening'
        '401':
          description: Unauthorized
  /checkout:
    post:
      tags:
        - misc
      summary: Checkout
      requestBody:
        content: 
          application/json:
            schema:
              $ref: '#/components/schemas/Checkout'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Purchase'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '404':
          description: Resource not found
components:
  schemas:
    Login:
      type: object
      properties:
        email:
          type: string
          example: user@domain.com
        password:
          type: string
          example: 12345
    AccessToken:
      type: object
      properties:
        accessToken:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9
        refreshToken:
          type: string
          example: eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6
    NewPassword:
      type: object
      properties:
        resetCode:
          type: string
          example: 1234
        newPassword:
          type: string
          example: newP4ssw0rd
    Register:
      type: object
      properties:
        avatar:
          type: string
          example: htpp://domain.com
        companyName:
          type: string
          example: Company
        fullName:
          type: string
          example: John James
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: p4ssw0rd
    Profile:
      type: object
      properties:
        profileId:
          type: integer
          format: int64
          example: 1
        avatar:
          type: string
          example: htpp://domain.com
        companyName:
          type: string
          example: Company
        fullName:
          type: string
          example: John James
        email:
          type: string
          example: john@email.com
    Movie:
      type: object
      properties:
        movieId:
          type: integer
          format: int64
          example: 1
        name:
          type: string
        genre:
          type: string
        age:
          type: string
        rating:
          type: integer
          format: int64
          example: 5
    Cinema:
      type: object
      properties:
        cinemaId:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: MyCinema
        address:
          $ref: '#/components/schemas/Address'
    Address:
      type: object
      properties:
        street:
          type: string
          example: 437 Lytton
        city:
          type: string
          example: Palo Alto
        state:
          type: string
          example: CA
        zip:
          type: string
          example: '94301'
        lat:
          type: number
          example: 1.1
        lng:
          type: number
          example: 0.1
    Screening:
      type: object
      properties:
        screeningId:
          type: integer
          format: int64
          example: 1
        movieId:
          type: integer
          format: int64
          example: 1
        auditoriumId:
          type: integer
          format: int64
          example: 1
        dateTime:
          type: string
          format: date-time
    Auditorium:
      type: object
      properties:
        auditoriumId:
          type: integer
          format: int64
          example: 1
        cinemaId:
          type: integer
          format: int64
          example: 1
        name:
          type: string
        rows:
          type: integer
          format: int64
        seatsPerRow:
          type: integer
          format: int64
    Comment:
      type: object
      properties:
        movieId:
          type: integer
          format: int64
          example: 1
        purchaseId:
          type: integer
          format: int64
          example: 1
        rate:
          type: integer
          format: int64
          example: 5
        comment:
          type: string
          example: Excelent
    Purchase:
      type: object
      properties:
        purchaseId:
          type: integer
          format: int64
          example: 1
        movieId:
          type: integer
          format: int64
          example: 1
        checkout:
          $ref: '#/components/schemas/Checkout'
        comment:
          $ref: '#/components/schemas/Comment'
    Checkout:
      type: object
      properties:
        screeningId:
          type: integer
          format: int64
          example: 10
        userId:
          type: integer
          format: int64
          example: 10
        seats:
          type: string
          example: A1,B2