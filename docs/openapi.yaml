openapi: 3.0.3
info:
  title: ScreenSpace
  description: |-
    The ScreenSpace mobile app is a complete solution for movie lovers that allows them to explore, purchase tickets and enjoy movies in nearby theaters more efficiently and personalized. Users can search for movies, view showtimes, purchase tickets and rate movies after watching them. The app also provides personalized recommendations based on the userâ€™s rating and viewing data.

    Some useful links:
    - [Frontend repository](https://github.com/sbroccardi/dai-tp-frontend)
    - [Backend repository](https://github.com/sbroccardi/dai-tp-backend)
    - [The source API definition for ScreenSpace API](https://github.com/sbroccardi/dai-tp-backend/blob/main/openapi.yaml)
  termsOfService: https://github.com/sbroccardi/dai-tp-backend/blob/main/terms.txt
  contact:
    email: sgilbroccardi@uade.edu.ar
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.11
servers:
  - url: https://screenspace.swagger.io/api/v3
tags:
  - name: auths
    description: Session operations
  - name: users
    description: Operations about Users
  - name: cinemas
    description: Access to Cinemas
  - name: auditoriums
    description: Operations about Auditoriums
  - name: movies
    description: Operations about Movies
  - name: misc
    description: checkout operations
paths:
  /health:
    get:
      tags:
        - misc
      summary: Health status
      responses:
        '200':
          description: Successful operation
        '503':
          description: Service unavailable
  /auths/loginPrivate:
    post:
      tags:
        - auths
      summary: Private login 
      requestBody:
        content: 
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
  /auths/loginPublic:
    post:
      tags:
        - auths
      summary: Public login 
      requestBody:
        content: 
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad request
  /auths:
    put:
      tags:
        - auths
      summary: Refresh token
      requestBody:
        content: 
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: authorization information missing or invalid
    delete:
      tags:
        - auths
      summary: Logout
      responses:
        '200':
          description: Successful operation
        '401':
          description: authorization information missing or invalid
  /users:
    post:
      tags:
        - users
      summary: Register 
      requestBody:
        content: 
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        '201':
          description: Resource created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad request
  /users/resetpassword:
    post:
      tags:
        - users
      summary: Reset password
      parameters:
        - name: email
          in: query
          description: email
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
        '404':
          description: User not found
  /users/resendcode:
    post:
      tags:
        - users
      summary: Resend code
      parameters:
        - name: email
          in: query
          description: email
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
        '404':
          description: User not found
  /users/confirmcode:
    post:
      tags:
        - users
      summary: Confirm code sent
      parameters:
        - name: email
          in: query
          description: email
          required: true
          schema:
            type: string
        - name: resetCode
          in: query
          description: resetCode
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
        '404':
          description: User not found
        '400':
          description: Invalid code
  /users/{user_id}/changepassword:
    post:
      tags:
        - users
      summary: Change password
      parameters:
        - name: user_id
          in: path
          description: user_id
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content: 
          application/json:
            schema:
              $ref: '#/components/schemas/NewPassword'
      responses:
        '200':
          description: Succesful operation
        '404':
          description: User not found
        '400':
          description: Invalid code
  /users/{user_id}:
    get:
      tags:
        - users
      summary:
        Get an user profile
      parameters:
        - name: user_id
          in: path
          description: user_id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
        '404':
          description: User not found
        '401':
          description: Unauthorized
  /users/{user_id}/me:
    get:
      tags:
        - users
      summary:
        Get user profile
      parameters:
        - name: user_id
          in: path
          description: user_id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
        '401':
          description: Unauthorized
    put:
      tags:
        - users
      summary: Update user profile
      parameters:
        - name: user_id
          in: path
          description: user_id
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content: 
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
        '401':
          description: Unauthorized
    delete:
      tags:
        - users
      parameters:
        - name: user_id
          in: path
          description: ID of user that needs to be fetched
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
        '401':
          description: Unauthorized
  /users/{user_id}/purchases:
    get:
      tags:
        - users
      summary:
          Get user purchases
      parameters:
        - name: user_id
          in: path
          description: user_id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User
        '404':
          description: User not found
        '401':
          description: Unauthorized
  /movies/{movie_id}/comments: 
    post:
      tags:
        - movies
      summary: Rate & comment movie
      parameters:
        - name: movie_id
          in: path
          description: movie_id
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content: 
          application/json:
            schema:
              $ref: '#/components/schemas/Rate'
      responses:
        '201':
          description: Resource created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Rate'
        '401':
          description: Unauthorized
  /cinemas:
    post:
      tags:
        - cinemas
      summary: Create cinema
      requestBody:
        content: 
          application/json:
            schema:
              $ref: '#/components/schemas/Cinema'
      responses:
        '201':
          description: Resource created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad request
        '409':
          description: Source Already Exists
        '401':
          description: Unauthorized
    get:
      tags:
        - cinemas
      summary:
          List user cinema (with token)  
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
        '401':
          description: Unauthorized
  /cinemas/{cinema_id}:
    get:
      tags:
        - cinemas
      summary:
          Get cinema details
      parameters:
        - name: cinema_id
          in: path
          description: cinema_id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: Resource not found
        '401':
          description: Unauthorized
    put:
      tags:
        - cinemas
      summary: Update cinema
      parameters:
        - name: cinema_id
          in: path
          description: cinema_id
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content: 
          application/json:
            schema:
              $ref: '#/components/schemas/Cinema'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
    delete:
      tags:
        - cinemas
      parameters:
        - name: cinema_id
          in: path
          description: ID of cinema that needs to be fetched
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: Resource not found
  /cinemas/{cinema_id}/auditoriums:
    get:
      tags:
        - auditoriums
      parameters:
        - name: cinema_id
          in: path
          description: ID of cinema that needs to be fetched
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    post:
      tags:
        - auditoriums
      summary: Create auditorium
      parameters:
        - name: cinema_id
          in: path
          description: cinema_id
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content: 
          application/json:
            schema:
              $ref: '#/components/schemas/Cinema'
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '409':
          description: Source Already Exists
          
  /cinemas/{cinema_id}/auditoriums/{auditorium_id}:
    get:
      tags:
        - auditoriums
      summary:
          Get auditorium details
      parameters:
        - name: cinema_id
          in: path
          description: cinema_id
          required: true
          schema:
            type: integer
            format: int64
        - name: auditorium_id
          in: path
          description: auditorium_id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    put:
      tags:
        - auditoriums
      summary: Update auditorium
      parameters:
        - name: cinema_id
          in: path
          description: cinema_id
          required: true
          schema:
            type: integer
            format: int64
        - name: auditorium_id
          in: path
          description: auditorium_id
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content: 
          application/json:
            schema:
              $ref: '#/components/schemas/Auditorium'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    delete:
      tags:
        - auditoriums
      parameters:
        - name: cinema_id
          in: path
          description: ID of cinema that needs to be fetched
          required: true
          schema:
            type: integer
            format: int64
        - name: auditorium_id
          in: path
          description: ID of auditorium that needs to be fetched
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /movies:
    get:
      tags:
        - movies
      summary:
           List movies       
      parameters:
        - name: genre
          in: query
          description: genre of movie
          required: true
          schema:
            type: string
        - name: age
          in: query
          description: age allowed
          required: true
          schema:
            type: integer
            format: int64
        - name: raiting
          in: query
          description: rating of the movie
          required: true
          schema:
            type: integer
            format: int64
        - name: distance
          in: query
          description: distance of the cinema
          required: true
          schema:
            type: number
        - name: cinema
          in: query
          description: name of the cinema
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Movie'
  /movies/{movie_id}:
    get:
      tags:
        - movies
      summary:
          Get movie details
      parameters:
        - name: movie_id
          in: path
          description: movie_id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Movie'
  /movies/{movie_id}/screenings:
    get:
      tags:
        - screenings
      summary:
          List screening
      parameters:
        - name: movie_id
          in: path
          description: movie_id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Screening'
    post:
      tags:
        - screenings
      summary: Create screening
      parameters:
        - name: movie_id
          in: path
          description: movie_id
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Screening'
      responses:
        '201':
          description: Resource created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Screening'
  /movies/{movie_id}/screenings/{screening_id}:
    get:
      tags:
        - screenings
      summary:
          Get screening details
      parameters:
        - name: movie_id
          in: path
          description: movie_id
          required: true
          schema:
            type: integer
            format: int64
        - name: screening_id
          in: path
          description: screening_id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    delete:
      tags:
        - screenings
      parameters:
        - name: movie_id
          in: path
          description: ID of movie that needs to be fetched
          required: true
          schema:
            type: integer
            format: int64
        - name: screening_id
          in: path
          description: ID of screening that needs to be fetched
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /movies/screenings:
    get:
      tags:
        - screenings
      summary:
        List all user screening (with token)
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /checkout:
    post:
      tags:
        - misc
      summary: Checkout
      requestBody:
        content: 
          application/json:
            schema:
              $ref: '#/components/schemas/Checkout'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Checkout'
components:
  schemas:
    Login:
      type: object
      properties:
        email:
          type: string
          example: user@domain.com
        password:
          type: string
          example: 12345
    User:
      type: object
      properties:
        avatar:
          type: string
          example: htpp://domain.com
        companyName:
          type: string
          example: Company
        fullName:
          type: string
          example: John James
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: '12345'
    Movie:
      type: object
      properties:
        movieId:
          type: integer
          format: int64
          example: 1
        genre:
          type: string
    Cinema:
      type: object
      properties:
        name:
          type: string
          example: MyCinema
        address:
          type: array
          xml:
            name: addresses
            wrapped: true
          items:
            $ref: '#/components/schemas/Address'
      xml:
        name: customer
    Address:
      type: object
      properties:
        street:
          type: string
          example: 437 Lytton
        city:
          type: string
          example: Palo Alto
        state:
          type: string
          example: CA
        zip:
          type: string
          example: '94301'
    Screening:
      type: object
      properties:
        auditoriumId:
          type: integer
          format: int64
          example: 1
        dateTime:
          type: string
          format: date-time
    Auditorium:
      type: object
      properties:
        name:
          type: string
        rows:
          type: integer
          format: int64
        seatsPerRow:
          type: integer
          format: int64
    Rate:
      type: object
      properties:
        movieId:
          type: integer
          format: int64
          example: 10
        rate:
          type: integer
          format: int64
          example: 10
        comment:
          type: string
          example: Excelent
    Checkout:
      type: object
      properties:
        screeningId:
          type: integer
          format: int64
          example: 10
        userId:
          type: integer
          format: int64
          example: 10
        seats:
          type: string
          example: A1,B2